{"name": "test_allureReport_v3[edge]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"button primary\" href=\"/docs/install/\">...</a> is not clickable at point (209, 547). Other element would receive the click: <p>...</p>\n  (Session info: MicrosoftEdge=134.0.3124.85)\nStacktrace:\n\tGetHandleVerifier [0x00007FF682AFAA15+20677]\n\tsimdutf::get_active_implementation [0x00007FF682A571C0+492624]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF682D4DC2A+1807418]\n\t(No symbol) [0x00007FF68289DDFE]\n\t(No symbol) [0x00007FF68289BDB7]\n\t(No symbol) [0x00007FF682899839]\n\t(No symbol) [0x00007FF682898A09]\n\t(No symbol) [0x00007FF68288E191]\n\t(No symbol) [0x00007FF6828B845A]\n\t(No symbol) [0x00007FF68288D6ED]\n\t(No symbol) [0x00007FF68288D5AD]\n\t(No symbol) [0x00007FF6828B8720]\n\t(No symbol) [0x00007FF68288D6ED]\n\t(No symbol) [0x00007FF6828D5D61]\n\t(No symbol) [0x00007FF6828B81C3]\n\t(No symbol) [0x00007FF68288CC36]\n\t(No symbol) [0x00007FF68288C0C4]\n\t(No symbol) [0x00007FF68288CA63]\n\t(No symbol) [0x00007FF682975B7D]\n\t(No symbol) [0x00007FF682981FE2]\n\t(No symbol) [0x00007FF68297A9A3]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF682BD477A+262026]\n\tsimdutf::get_active_implementation [0x00007FF682A648F1+547713]\n\tsimdutf::get_active_implementation [0x00007FF682A5DBA4+519732]\n\tsimdutf::get_active_implementation [0x00007FF682A5DCE9+520057]\n\tsimdutf::get_active_implementation [0x00007FF682A4F896+461606]\n\tBaseThreadInitThunk [0x00007FF86D7D259D+29]\n\tRtlUserThreadStart [0x00007FF86EB2AF38+40]", "trace": "setup_teardown = <selenium.webdriver.edge.webdriver.WebDriver (session=\"6e1bb624973640dd3b1a9554e50e2dab\")>\n\n    @allure.severity(allure.severity_level.BLOCKER)\n    def test_allureReport_v3(setup_teardown):\n        driver = setup_teardown\n        driver.get(\"https://allurereport.org/\")\n        element = driver.find_element(by=By.XPATH, value=\"//a[@class='button primary']\")\n>       element.click()\n\nfixtures_paraWithDriver\\test_diffbrowser.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B76CDD23F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...A4F896+461606]\\\\n\\\\tBaseThreadInitThunk [0x00007FF86D7D259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF86EB2AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"button primary\" href=\"/docs/install/\">...</a> is not clickable at point (209, 547). Other element would receive the click: <p>...</p>\nE         (Session info: MicrosoftEdge=134.0.3124.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF682AFAA15+20677]\nE       \tsimdutf::get_active_implementation [0x00007FF682A571C0+492624]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF682D4DC2A+1807418]\nE       \t(No symbol) [0x00007FF68289DDFE]\nE       \t(No symbol) [0x00007FF68289BDB7]\nE       \t(No symbol) [0x00007FF682899839]\nE       \t(No symbol) [0x00007FF682898A09]\nE       \t(No symbol) [0x00007FF68288E191]\nE       \t(No symbol) [0x00007FF6828B845A]\nE       \t(No symbol) [0x00007FF68288D6ED]\nE       \t(No symbol) [0x00007FF68288D5AD]\nE       \t(No symbol) [0x00007FF6828B8720]\nE       \t(No symbol) [0x00007FF68288D6ED]\nE       \t(No symbol) [0x00007FF6828D5D61]\nE       \t(No symbol) [0x00007FF6828B81C3]\nE       \t(No symbol) [0x00007FF68288CC36]\nE       \t(No symbol) [0x00007FF68288C0C4]\nE       \t(No symbol) [0x00007FF68288CA63]\nE       \t(No symbol) [0x00007FF682975B7D]\nE       \t(No symbol) [0x00007FF682981FE2]\nE       \t(No symbol) [0x00007FF68297A9A3]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF682BD477A+262026]\nE       \tsimdutf::get_active_implementation [0x00007FF682A648F1+547713]\nE       \tsimdutf::get_active_implementation [0x00007FF682A5DBA4+519732]\nE       \tsimdutf::get_active_implementation [0x00007FF682A5DCE9+520057]\nE       \tsimdutf::get_active_implementation [0x00007FF682A4F896+461606]\nE       \tBaseThreadInitThunk [0x00007FF86D7D259D+29]\nE       \tRtlUserThreadStart [0x00007FF86EB2AF38+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "parameters": [{"name": "setup_teardown", "value": "'edge'"}], "start": 1743015577486, "stop": 1743015580576, "uuid": "1c38b218-59d8-4265-a19d-2c6e481b8d86", "historyId": "b4e85576ba5db09beadaf0b6c98b0531", "testCaseId": "ef98ff4fadc1630dbfd804798181383c", "fullName": "fixtures_paraWithDriver.test_diffbrowser#test_allureReport_v3", "labels": [{"name": "severity", "value": "blocker"}, {"name": "parentSuite", "value": "fixtures_paraWithDriver"}, {"name": "suite", "value": "test_diffbrowser"}, {"name": "host", "value": "Edmond"}, {"name": "thread", "value": "33728-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "fixtures_paraWithDriver.test_diffbrowser"}]}